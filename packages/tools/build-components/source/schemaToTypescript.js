/* eslint-disable no-restricted-syntax, import/no-dynamic-require */
const path = require('path');
const fs = require('fs-extra');
const { compile } = require('json-schema-to-typescript');
const { pascalCase } = require('change-case');
const { root } = require('./utils');

const style = require(`${root}/.prettierrc`);

// @see https://github.com/bcherny/json-schema-to-typescript#not-expressible-in-typescript
function removeUnsupportedProps(obj) {
  for (const prop in obj) {
    if (prop === 'oneOf') delete obj[prop];
    else if (typeof obj[prop] === 'object') removeUnsupportedProps(obj[prop]);
  }
  return obj;
}

const options = {
  bannerComment:
    '/* eslint-disable */\n/**\n* This file was automatically generated by json-schema-to-typescript.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run `npm run schema2ts` to regenerate this file.\n*/',
  style,
};

const createTypes = async (schema, schemaPath) => {
  if (!(schema.title && (schema.properties || schema.allOf || schema.$ref)))
    return;
  const basename = path.basename(schemaPath, '.json');
  const dirname = path.dirname(schemaPath);
  schema.title += ' Props';
  removeUnsupportedProps(schema);
  const ts = await compile(schema, schema.title, options);

  return fs.writeFile(
    `${dirname}/${pascalCase(
      basename.replace(/\.(schema|definitions)$/, '')
    )}Props.ts`,
    ts
  );
};

module.exports = {
  createTypes,
};
