/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run `yarn run schema` to regenerate this file.
 */

/**
 * Picture source
 */
export type Source = string;
/**
 * Width of the picture
 */
export type Width = number;
/**
 * Height of the picture
 */
export type Height = number;
/**
 * Use a srcSet to display picture
 */
export type PictureSourceset = string;
/**
 * Alt text to display for picture
 */
export type AltText = string;
/**
 * Add additional css classes that should be applied to the button
 */
export type AdditionalClasses = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute = string;
/**
 * Add id attribute to the image
 */
export type Id = string;
/**
 * Define an itemprop attribute for the picture
 */
export type ItempropAttribute = string;
/**
 * Define a style attribute for the picture
 */
export type StyleAttribute = string;
/**
 * Render noscript fallback
 */
export type Noscript = boolean;
/**
 * Load the picture lazily
 */
export type Lazy = boolean;
/**
 * Use a srcSet to display picture
 */
export type PictureSourceset1 = string;
/**
 * TODO MEDIA DESCRIPTION
 */
export type TODOMEDIATITLE = string;
/**
 * TODO TYPE DESCRIPTION
 */
export type TODOTYPETITLE = string;
/**
 * Additional sources. This will result in a `picture`-Element
 */
export type Sources = {
  srcSet?: PictureSourceset1;
  media?: TODOMEDIATITLE;
  type?: TODOTYPETITLE;
}[];
/**
 * Set additional class(es) to the picture
 */
export type ClassAttribute = string;
/**
 * Picture source
 */
export type Source1 = string;
/**
 * Use a srcSet to display picture
 */
export type PictureSourceset2 = string;
/**
 * Alt text to display for picture
 */
export type AltText1 = string;
/**
 * Width of the picture
 */
export type Width1 = number;
/**
 * Height of the picture
 */
export type Height1 = number;
/**
 * Add additional css classes that should be applied to the button
 */
export type AdditionalClasses1 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute1 = string;
/**
 * Add id attribute to the image
 */
export type Id1 = string;
/**
 * Define an itemprop attribute for the picture
 */
export type ItempropAttribute1 = string;
/**
 * Define a style attribute for the picture
 */
export type StyleAttribute1 = string;
/**
 * Render noscript fallback
 */
export type Noscript1 = boolean;
/**
 * Load the picture lazily
 */
export type Lazy1 = boolean;
/**
 * Use a srcSet to display picture
 */
export type PictureSourceset3 = string;
/**
 * TODO MEDIA DESCRIPTION
 */
export type TODOMEDIATITLE1 = string;
/**
 * TODO TYPE DESCRIPTION
 */
export type TODOTYPETITLE1 = string;
/**
 * Additional sources. This will result in a `picture`-Element
 */
export type Sources1 = {
  srcSet?: PictureSourceset3;
  media?: TODOMEDIATITLE1;
  type?: TODOTYPETITLE1;
}[];
/**
 * Set additional class(es) to the picture
 */
export type ClassAttribute1 = string;
/**
 * Additional css classes attached to the wrapping element
 */
export type Class = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute2 = string;
/**
 * Link used for button
 */
export type ButtonHref = string;
/**
 * Text used on button
 */
export type Label = string;
/**
 * Title for news item
 */
export type Title = string;
/**
 * Bodytext for news item
 */
export type Bodytext = string;
/**
 * Text to display inside tag label
 */
export type Label1 = string;
/**
 * Choose a size to scale the tag label up or down
 */
export type Size = 's' | 'm' | 'l';
/**
 * Set optional href to link the tag
 */
export type LinkTarget = string;
/**
 * Choose whether the element is removable or not
 */
export type Removable = boolean;
/**
 * Add additional css classes that should be applied to the label
 */
export type AdditionalClasses2 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute3 = string;
export type Categories = TagLabel[];
/**
 * Additional css classes attached to the wrapping element
 */
export type Class1 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute4 = string;

/**
 * Post Teaser
 */
export interface PostTeaserProps {
  image?: Picture;
  meta?: PostMeta;
  link: Link;
  title?: Title;
  body?: Bodytext;
  categories?: Categories;
  className?: Class1;
  component?: KsComponentAttribute4;
}
/**
 * Base component to display a picture
 */
export interface Picture {
  src?: Source;
  width?: Width;
  height?: Height;
  srcSet?: PictureSourceset;
  alt?: AltText;
  className?: AdditionalClasses;
  component?: KsComponentAttribute;
  id?: Id;
  itemProp?: ItempropAttribute;
  style?: StyleAttribute;
  noscript?: Noscript;
  lazy?: Lazy;
  sources?: Sources;
  pictureClassName?: ClassAttribute;
}
/**
 * Post Meta
 */
export interface PostMeta {
  author?: {
    name?: string;
    image?: Picture1;
  };
  items?: MetaItem[];
  className?: Class;
  component?: KsComponentAttribute2;
}
/**
 * Base component to display a picture
 */
export interface Picture1 {
  src?: Source1;
  srcSet?: PictureSourceset2;
  alt?: AltText1;
  width?: Width1;
  height?: Height1;
  className?: AdditionalClasses1;
  component?: KsComponentAttribute1;
  id?: Id1;
  itemProp?: ItempropAttribute1;
  style?: StyleAttribute1;
  noscript?: Noscript1;
  lazy?: Lazy1;
  sources?: Sources1;
  pictureClassName?: ClassAttribute1;
}
export interface MetaItem {
  icon?: string;
  text?: string;
}
/**
 * Link for news item
 */
export interface Link {
  href: ButtonHref;
  label: Label;
}
/**
 * Component to render a pill / tag / label
 */
export interface TagLabel {
  label: Label1;
  size?: Size;
  link?: LinkTarget;
  removable?: Removable;
  className?: AdditionalClasses2;
  component?: KsComponentAttribute3;
}
