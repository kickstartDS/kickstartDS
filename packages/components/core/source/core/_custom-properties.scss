@use 'sass:meta';
@use 'sass:map';
@use 'sass:string';
@use './breakpoint';

@mixin responsive-custom-property($name, $value, $container-name: null) {
  @if meta.type-of($value) == 'map' {
    @each $bp, $val in $value {
      @if $bp == 'xs' or $bp == 0 or not $bp {
        @include responsive-custom-property($name, $val);
      } @else {
        @if meta.type-of($bp) == 'string' {
          @include breakpoint.media('â‰¥#{$bp}') {
            @include responsive-custom-property($name, $val);
          }
        } @else {
          @if not $container-name {
            @error '`container-name-`-property is requred for #{$name}.';
          }
          @container #{string.unquote($container-name)} size(min-width: #{$bp}px) {
            @include responsive-custom-property($name, $val);
          }
        }
      }
    }
  } @else if $value {
    #{$name}: #{$value};
  }
}

@mixin styles($map) {
  @if not map.has-key($map, 'name-') {
    @error '`name-`-property is requred.';
  }
  $name: map.get($map, 'name-');
  $container-name: map.get($map, 'container-name-');
  $map: map.remove($map, 'name-');
  $map: map.remove($map, 'container-name-');

  @each $key, $rules in $map {
    $group: if($key == 'host', null, '_#{$key}');
    $prefix: '--#{$name + $group}--';

    @each $selector, $properties in $rules {
      #{$selector} {
        @each $property, $value in $properties {
          @include responsive-custom-property(
            $prefix + $property,
            $value,
            $container-name
          );
        }
      }
    }
  }
}
