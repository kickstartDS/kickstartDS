/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run `yarn run schema` to regenerate this file.
 */

/**
 * Width of section to use
 */
export type Width = 'full' | 'max' | 'wide' | 'default' | 'narrow';
/**
 * Size of gutter to use
 */
export type Gutter = 'large' | 'default' | 'small' | 'none';
/**
 * Layout mode used for section contents
 */
export type Mode = 'default' | 'tile' | 'list';
/**
 * Text used on button
 */
export type Label = string;
/**
 * Choose one of the styles from the list
 */
export type ButtonStyle = 'solid' | 'clear' | 'outline';
export type Inverted = boolean;
/**
 * Choose a size between small, medium and large
 */
export type ButtonSize = 'small' | 'medium' | 'large';
/**
 * Link used for button
 */
export type ButtonHref = string;
export type IconIdentifier = string;
export type AriaRole = string;
export type AdditionalClass = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute = string;
export type IconIdentifier1 = string;
export type AriaRole1 = string;
export type AdditionalClass1 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute1 = string;
/**
 * Add fill animation on hover
 */
export type FillAnimation = boolean;
/**
 * Add icon animation on hover
 */
export type IconAnimation = boolean;
/**
 * Select the type attribute for the button
 */
export type TypeAttribute = 'button' | 'submit' | 'reset';
/**
 * Define a value attribute for the button
 */
export type ValueAttribute = string;
/**
 * Define a name attribute for the button
 */
export type NameAttribute = string;
/**
 * Set the disabled attribute for the button
 */
export type DisabledAttribute = boolean;
/**
 * Open link in new Tab
 */
export type OpenLinkInNewTab = boolean;
/**
 * Add additional css classes that should be applied to the button
 */
export type AdditionalClasses = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute2 = string;
/**
 * Text to display inside tag label
 */
export type Label1 = string;
/**
 * Choose a size to scale the tag label up or down
 */
export type Size = 's' | 'm' | 'l';
/**
 * Set optional href to link the tag
 */
export type LinkTarget = string;
/**
 * Choose whether the element is removable or not
 */
export type Removable = boolean;
/**
 * Add additional css classes that should be applied to the label
 */
export type AdditionalClasses1 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute3 = string;
/**
 * Picture source
 */
export type Source = string;
/**
 * Use a srcSet to display picture
 */
export type PictureSourceset = string;
/**
 * Alt text to display for picture
 */
export type AltText = string;
/**
 * Width of the picture
 */
export type Width1 = number;
/**
 * Height of the picture
 */
export type Height = number;
/**
 * Add additional css classes that should be applied to the button
 */
export type AdditionalClasses2 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute4 = string;
/**
 * Add id attribute to the image
 */
export type Id = string;
/**
 * Define an itemprop attribute for the picture
 */
export type ItempropAttribute = string;
/**
 * Define a style attribute for the picture
 */
export type StyleAttribute = string;
/**
 * Render noscript fallback
 */
export type Noscript = boolean;
/**
 * Load the picture lazily
 */
export type Lazy = boolean;
/**
 * Use a srcSet to display picture
 */
export type PictureSourceset1 = string;
/**
 * TODO MEDIA DESCRIPTION
 */
export type TODOMEDIATITLE = string;
/**
 * TODO TYPE DESCRIPTION
 */
export type TODOTYPETITLE = string;
/**
 * Additional sources. This will result in a `picture`-Element
 */
export type Sources = {
  srcSet?: PictureSourceset1;
  media?: TODOMEDIATITLE;
  type?: TODOTYPETITLE;
}[];
/**
 * Set additional class(es) to the picture
 */
export type ClassAttribute = string;
/**
 * Name, company name, etc.
 */
export type Title = string;
/**
 * Position, profession, department, location, etc.
 */
export type Subtitle = string;
/**
 * Open link in new Tab
 */
export type OpenLinkInNewTab1 = boolean;
export type CopyText = string;
/**
 * Additional css classes attached to the wrapping element
 */
export type Class = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute5 = string;
/**
 * Include the text for the collapsible that should be visible before opening
 */
export type SummaryTextForTheCollapsible = string;
/**
 * Include the text for the collapsible that should be visible after opening
 */
export type ContentOfTheCollapsible = string;
export type InitialOpen = boolean;
/**
 * Additional css classes attached to the wrapping element
 */
export type Class1 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute6 = string;
/**
 * Choose one of the set ratios, all ratios except `none` stretch the image to 100% width
 */
export type ImageRatio = 'none' | '4:3' | '16:9' | '1:1';
/**
 * Choose an alignment for the box. For the image it only applies for a `ratio` value of `none`
 */
export type Alignment = 'left' | 'center' | 'right';
/**
 * Select an image to display inside the content box, at the top
 */
export type ImageSource = string;
/**
 * Topic for the content box. Displayed before the text, in bold
 */
export type Topic = string;
/**
 * Text for the content box
 */
export type TextContent = string;
/**
 * Toggles visibility of the link
 */
export type DisplayLink = boolean;
/**
 * Text used on button
 */
export type Label2 = string;
/**
 * Choose one of the styles from the list
 */
export type ButtonStyle1 = 'solid' | 'clear' | 'outline';
export type Inverted1 = boolean;
/**
 * Choose a size between small, medium and large
 */
export type ButtonSize1 = 'small' | 'medium' | 'large';
/**
 * Link used for button
 */
export type ButtonHref1 = string;
export type IconIdentifier2 = string;
export type AriaRole2 = string;
export type AdditionalClass2 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute7 = string;
export type IconIdentifier3 = string;
export type AriaRole3 = string;
export type AdditionalClass3 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute8 = string;
/**
 * Add fill animation on hover
 */
export type FillAnimation1 = boolean;
/**
 * Add icon animation on hover
 */
export type IconAnimation1 = boolean;
/**
 * Select the type attribute for the button
 */
export type TypeAttribute1 = 'button' | 'submit' | 'reset';
/**
 * Define a value attribute for the button
 */
export type ValueAttribute1 = string;
/**
 * Define a name attribute for the button
 */
export type NameAttribute1 = string;
/**
 * Set the disabled attribute for the button
 */
export type DisabledAttribute1 = boolean;
/**
 * Open link in new Tab
 */
export type OpenLinkInNewTab2 = boolean;
/**
 * Add additional css classes that should be applied to the button
 */
export type AdditionalClasses3 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute9 = string;
/**
 * Add additional css classes that should be applied to the content box
 */
export type AdditionalClasses4 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute10 = string;
/**
 * Select the headline level to use, or p alternatively
 */
export type Level = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'p';
/**
 * Select the headline style to use
 */
export type Style = 'none' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'p';
/**
 * Choose an alignment for the headline
 */
export type Alignment1 = 'left' | 'center' | 'right';
/**
 * Text content for the headline
 */
export type Text = string;
/**
 * Text content for the optional subheadline
 */
export type Subheadline = string;
/**
 * Add additional spacing to the bottom of the headline
 */
export type BottomSpacing = 'minimum' | 'small' | 'large';
/**
 * Add additional css classes that should be applied to the headline
 */
export type AdditionalClasses5 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute11 = string;
/**
 * Copy text for the element
 */
export type TextContent1 = string;
/**
 * In relation to the text content
 */
export type MediaAlignment =
  | 'above-left'
  | 'above-center'
  | 'above-right'
  | 'beside-left'
  | 'beside-right'
  | 'intext-left'
  | 'intext-right'
  | 'below-left'
  | 'below-center'
  | 'below-right';
/**
 * Url (mp4) for the video to display
 */
export type Source1 = string;
/**
 * Use an iframe embed
 */
export type EmbeddedIframe = boolean;
/**
 * Title to use for the video
 */
export type VideoTitle = string;
/**
 * Width of the video
 */
export type Width2 = number;
/**
 * Height of the video
 */
export type Height1 = number;
/**
 * Display media item over full width
 */
export type FullWidthMedia = boolean;
/**
 * Caption
 */
export type Caption = string;
/**
 * Picture source
 */
export type Source2 = string;
/**
 * Use a srcSet to display picture
 */
export type PictureSourceset2 = string;
/**
 * Alt text to display for picture
 */
export type AltText1 = string;
/**
 * Width of the picture
 */
export type Width3 = number;
/**
 * Height of the picture
 */
export type Height2 = number;
/**
 * Add additional css classes that should be applied to the button
 */
export type AdditionalClasses6 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute12 = string;
/**
 * Add id attribute to the image
 */
export type Id1 = string;
/**
 * Define an itemprop attribute for the picture
 */
export type ItempropAttribute1 = string;
/**
 * Define a style attribute for the picture
 */
export type StyleAttribute1 = string;
/**
 * Render noscript fallback
 */
export type Noscript1 = boolean;
/**
 * Load the picture lazily
 */
export type Lazy1 = boolean;
/**
 * Use a srcSet to display picture
 */
export type PictureSourceset3 = string;
/**
 * TODO MEDIA DESCRIPTION
 */
export type TODOMEDIATITLE1 = string;
/**
 * TODO TYPE DESCRIPTION
 */
export type TODOTYPETITLE1 = string;
/**
 * Additional sources. This will result in a `picture`-Element
 */
export type Sources1 = {
  srcSet?: PictureSourceset3;
  media?: TODOMEDIATITLE1;
  type?: TODOTYPETITLE1;
}[];
/**
 * Set additional class(es) to the picture
 */
export type ClassAttribute1 = string;
/**
 * Display media item over full width
 */
export type FullWidthMedia1 = boolean;
/**
 * Caption
 */
export type Caption1 = string;
export type ThumbnailSource = string;
export type LightboxImageSource = string;
export type Width4 = number;
export type Height3 = number;
export type HoverZoomIcon = boolean;
export type Caption2 = string;
export type HideCaptionVisually = boolean;
export type GalleryIdentifier = string;
export type ID = string;
export type AdditionalClass4 = string;
export type AdditionalCaptionClass = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute13 = string;
/**
 * Display media item over full width
 */
export type FullWidthMedia2 = boolean;
/**
 * Caption
 */
export type Caption3 = string;
/**
 * Collection of media items to display
 */
export type Media = (TextMediaVideo | TextMediaImage | TextMediaLazyImage)[];
/**
 * Additional css classes attached to the wrapping element
 */
export type Class2 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute14 = string;
/**
 * Topic for the teaser box. Displayed before the text, in bold
 */
export type Topic1 = string;
/**
 * Text for the teaser box
 */
export type TextContent2 = string;
export type Inverted2 = boolean;
/**
 * Text used on button
 */
export type Label3 = string;
/**
 * Choose one of the styles from the list
 */
export type ButtonStyle2 = 'solid' | 'clear' | 'outline';
export type Inverted3 = boolean;
/**
 * Choose a size between small, medium and large
 */
export type ButtonSize2 = 'small' | 'medium' | 'large';
/**
 * Link used for button
 */
export type ButtonHref2 = string;
export type IconIdentifier4 = string;
export type AriaRole4 = string;
export type AdditionalClass5 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute15 = string;
export type IconIdentifier5 = string;
export type AriaRole5 = string;
export type AdditionalClass6 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute16 = string;
/**
 * Add fill animation on hover
 */
export type FillAnimation2 = boolean;
/**
 * Add icon animation on hover
 */
export type IconAnimation2 = boolean;
/**
 * Select the type attribute for the button
 */
export type TypeAttribute2 = 'button' | 'submit' | 'reset';
/**
 * Define a value attribute for the button
 */
export type ValueAttribute2 = string;
/**
 * Define a name attribute for the button
 */
export type NameAttribute2 = string;
/**
 * Set the disabled attribute for the button
 */
export type DisabledAttribute2 = boolean;
/**
 * Open link in new Tab
 */
export type OpenLinkInNewTab3 = boolean;
/**
 * Add additional css classes that should be applied to the button
 */
export type AdditionalClasses7 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute17 = string;
/**
 * Hides the link. The box as a whole keeps being clickable
 */
export type HideLink = boolean;
/**
 * Additional css classes attached to the box
 */
export type Class3 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute18 = string;
/**
 * Select an image to display inside the teaser box, at the top
 */
export type ImageSource1 = string;
/**
 * Choose the ratio used to crop and display the image
 */
export type ImageRatio1 = '4:3' | '16:9' | '1:1';
/**
 * Optionally add inner spacing to the displayed image
 */
export type ImageSpacing = boolean;
/**
 * Topic for the teaser box. Displayed before the text, in bold
 */
export type Topic2 = string;
/**
 * Text for the teaser box
 */
export type TextContent3 = string;
export type Inverted4 = boolean;
/**
 * Text used on button
 */
export type Label4 = string;
/**
 * Choose one of the styles from the list
 */
export type ButtonStyle3 = 'solid' | 'clear' | 'outline';
export type Inverted5 = boolean;
/**
 * Choose a size between small, medium and large
 */
export type ButtonSize3 = 'small' | 'medium' | 'large';
/**
 * Link used for button
 */
export type ButtonHref3 = string;
export type IconIdentifier6 = string;
export type AriaRole6 = string;
export type AdditionalClass7 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute19 = string;
export type IconIdentifier7 = string;
export type AriaRole7 = string;
export type AdditionalClass8 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute20 = string;
/**
 * Add fill animation on hover
 */
export type FillAnimation3 = boolean;
/**
 * Add icon animation on hover
 */
export type IconAnimation3 = boolean;
/**
 * Select the type attribute for the button
 */
export type TypeAttribute3 = 'button' | 'submit' | 'reset';
/**
 * Define a value attribute for the button
 */
export type ValueAttribute3 = string;
/**
 * Define a name attribute for the button
 */
export type NameAttribute3 = string;
/**
 * Set the disabled attribute for the button
 */
export type DisabledAttribute3 = boolean;
/**
 * Open link in new Tab
 */
export type OpenLinkInNewTab4 = boolean;
/**
 * Add additional css classes that should be applied to the button
 */
export type AdditionalClasses8 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute21 = string;
/**
 * Hides the link. The box as a whole keeps being clickable
 */
export type HideLink1 = boolean;
/**
 * Additional css classes attached to the box
 */
export type Class4 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute22 = string;
/**
 * Allowed content for the section
 */
export type Content = (
  | Button
  | TagLabel
  | Contact
  | CollapsibleBox
  | ContentBox
  | Headline
  | TextMedia
  | TeaserBox
  | TeaserRow
)[];
/**
 * Type of background
 */
export type Background = 'default' | 'accent' | 'bold';
/**
 * Whether to invert the section
 */
export type Inverted6 = boolean;
/**
 * Amount of spacing before the section
 */
export type SpaceBefore = 'default' | 'small' | 'none';
/**
 * Amount of spacing after the section
 */
export type SpaceAfter = 'default' | 'small' | 'none';
/**
 * Choose an alignment for the headline
 */
export type Alignment2 = 'left' | 'center' | 'right';
/**
 * Select the headline level to use, or p alternatively
 */
export type Level1 = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'p';
/**
 * Select the headline style to use
 */
export type Style1 = 'none' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'p';
/**
 * Text content for the headline
 */
export type Text1 = string;
/**
 * Text content for the optional subheadline
 */
export type Subheadline1 = string;
/**
 * Add additional spacing to the bottom of the headline
 */
export type BottomSpacing1 = 'minimum' | 'small' | 'large';
/**
 * Add additional css classes that should be applied to the headline
 */
export type AdditionalClasses9 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute23 = string;
/**
 * Add additional css classes that should be applied to the section
 */
export type AdditionalClass9 = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute24 = string;

export interface SectionProps {
  width?: Width;
  gutter?: Gutter;
  mode?: Mode;
  content?: Content;
  background?: Background;
  inverted?: Inverted6;
  spaceBefore?: SpaceBefore;
  spaceAfter?: SpaceAfter;
  headline?: Headline1;
  className?: AdditionalClass9;
  component?: KsComponentAttribute24;
}
/**
 * Component to display links and call-to-actions
 */
export interface Button {
  label?: Label;
  variant?: ButtonStyle;
  inverted?: Inverted;
  size?: ButtonSize;
  href?: ButtonHref;
  iconBefore?: IconBeforeButton;
  iconAfter?: IconAfterButton;
  fillAnimation?: FillAnimation;
  iconAnimation?: IconAnimation;
  type?: TypeAttribute;
  value?: ValueAttribute;
  name?: NameAttribute;
  disabled?: DisabledAttribute;
  newTab?: OpenLinkInNewTab;
  className?: AdditionalClasses;
  component?: KsComponentAttribute2;
}
/**
 * Icon identifier for icon before the button text
 */
export interface IconBeforeButton {
  icon: IconIdentifier;
  role?: AriaRole;
  className?: AdditionalClass;
  component?: KsComponentAttribute;
}
/**
 * Icon identifier for icon after the button text
 */
export interface IconAfterButton {
  icon: IconIdentifier1;
  role?: AriaRole1;
  className?: AdditionalClass1;
  component?: KsComponentAttribute1;
}
/**
 * Component to render a pill / tag / label
 */
export interface TagLabel {
  label: Label1;
  size?: Size;
  link?: LinkTarget;
  removable?: Removable;
  className?: AdditionalClasses1;
  component?: KsComponentAttribute3;
}
/**
 * Component to show contact information
 */
export interface Contact {
  image?: Picture;
  title?: Title;
  subtitle?: Subtitle;
  links?: {
    icon?: string;
    label?: string;
    href?: string;
    newTab?: OpenLinkInNewTab1;
  }[];
  copy?: CopyText;
  className?: Class;
  component?: KsComponentAttribute5;
}
/**
 * Base component to display a picture
 */
export interface Picture {
  src?: Source;
  srcSet?: PictureSourceset;
  alt?: AltText;
  width?: Width1;
  height?: Height;
  className?: AdditionalClasses2;
  component?: KsComponentAttribute4;
  id?: Id;
  itemProp?: ItempropAttribute;
  style?: StyleAttribute;
  noscript?: Noscript;
  lazy?: Lazy;
  sources?: Sources;
  pictureClassName?: ClassAttribute;
}
/**
 * Component to conditionally show additional info
 */
export interface CollapsibleBox {
  summary: SummaryTextForTheCollapsible;
  text: ContentOfTheCollapsible;
  open?: InitialOpen;
  className?: Class1;
  component?: KsComponentAttribute6;
}
/**
 * Component to display content in a condensed, boxed form
 */
export interface ContentBox {
  ratio?: ImageRatio;
  alignement?: Alignment;
  image?: ImageSource;
  topic?: Topic;
  text?: TextContent;
  link?: Link;
  className?: AdditionalClasses4;
  component?: KsComponentAttribute10;
}
/**
 * Content box link configuration
 */
export interface Link {
  enabled?: DisplayLink;
  label?: Label2;
  variant?: ButtonStyle1;
  inverted?: Inverted1;
  size?: ButtonSize1;
  href?: ButtonHref1;
  iconBefore?: IconBeforeButton1;
  iconAfter?: IconAfterButton1;
  fillAnimation?: FillAnimation1;
  iconAnimation?: IconAnimation1;
  type?: TypeAttribute1;
  value?: ValueAttribute1;
  name?: NameAttribute1;
  disabled?: DisabledAttribute1;
  newTab?: OpenLinkInNewTab2;
  className?: AdditionalClasses3;
  component?: KsComponentAttribute9;
}
/**
 * Icon identifier for icon before the button text
 */
export interface IconBeforeButton1 {
  icon: IconIdentifier2;
  role?: AriaRole2;
  className?: AdditionalClass2;
  component?: KsComponentAttribute7;
}
/**
 * Icon identifier for icon after the button text
 */
export interface IconAfterButton1 {
  icon: IconIdentifier3;
  role?: AriaRole3;
  className?: AdditionalClass3;
  component?: KsComponentAttribute8;
}
/**
 * Headline
 */
export interface Headline {
  level?: Level;
  styleAs?: Style;
  align?: Alignment1;
  content: Text;
  subheadline?: Subheadline;
  spaceAfter?: BottomSpacing;
  className?: AdditionalClasses5;
  component?: KsComponentAttribute11;
}
/**
 * Component to display copy text, including media
 */
export interface TextMedia {
  text: TextContent1;
  mediaAlignment?: MediaAlignment;
  media?: Media;
  className?: Class2;
  component?: KsComponentAttribute14;
}
export interface TextMediaVideo {
  video?: Video;
  full?: FullWidthMedia;
  caption?: Caption;
}
/**
 * Video item to display
 */
export interface Video {
  src: Source1;
  iframe?: EmbeddedIframe;
  title?: VideoTitle;
  width: Width2;
  height: Height1;
}
export interface TextMediaImage {
  image?: Picture1;
  full?: FullWidthMedia1;
  caption?: Caption1;
}
/**
 * Base component to display a picture
 */
export interface Picture1 {
  src?: Source2;
  srcSet?: PictureSourceset2;
  alt?: AltText1;
  width?: Width3;
  height?: Height2;
  className?: AdditionalClasses6;
  component?: KsComponentAttribute12;
  id?: Id1;
  itemProp?: ItempropAttribute1;
  style?: StyleAttribute1;
  noscript?: Noscript1;
  lazy?: Lazy1;
  sources?: Sources1;
  pictureClassName?: ClassAttribute1;
}
export interface TextMediaLazyImage {
  lightboxImage?: LightboxImage;
  full?: FullWidthMedia2;
  caption?: Caption3;
}
/**
 * Lightbox Image
 */
export interface LightboxImage {
  thumb?: ThumbnailSource;
  image?: LightboxImageSource;
  width?: Width4;
  height?: Height3;
  zoomIcon?: HoverZoomIcon;
  caption?: Caption2;
  hideCaption?: HideCaptionVisually;
  gallery?: GalleryIdentifier;
  id?: ID;
  className?: AdditionalClass4;
  captionClassName?: AdditionalCaptionClass;
  component?: KsComponentAttribute13;
}
/**
 * Component to tease external content
 */
export interface TeaserBox {
  topic?: Topic1;
  text?: TextContent2;
  inverted?: Inverted2;
  link?: Button1;
  className?: Class3;
  component?: KsComponentAttribute18;
  image?: ImageSource1;
  ratio: ImageRatio1;
  imageSpacing?: ImageSpacing;
}
/**
 * Component to display links and call-to-actions
 */
export interface Button1 {
  label?: Label3;
  variant?: ButtonStyle2;
  inverted?: Inverted3;
  size?: ButtonSize2;
  href?: ButtonHref2;
  iconBefore?: IconBeforeButton2;
  iconAfter?: IconAfterButton2;
  fillAnimation?: FillAnimation2;
  iconAnimation?: IconAnimation2;
  type?: TypeAttribute2;
  value?: ValueAttribute2;
  name?: NameAttribute2;
  disabled?: DisabledAttribute2;
  newTab?: OpenLinkInNewTab3;
  className?: AdditionalClasses7;
  component?: KsComponentAttribute17;
  hidden?: HideLink;
}
/**
 * Icon identifier for icon before the button text
 */
export interface IconBeforeButton2 {
  icon: IconIdentifier4;
  role?: AriaRole4;
  className?: AdditionalClass5;
  component?: KsComponentAttribute15;
}
/**
 * Icon identifier for icon after the button text
 */
export interface IconAfterButton2 {
  icon: IconIdentifier5;
  role?: AriaRole5;
  className?: AdditionalClass6;
  component?: KsComponentAttribute16;
}
/**
 * Component to tease external content
 */
export interface TeaserRow {
  topic?: Topic2;
  text?: TextContent3;
  inverted?: Inverted4;
  link?: Button2;
  className?: Class4;
  component?: KsComponentAttribute22;
}
/**
 * Component to display links and call-to-actions
 */
export interface Button2 {
  label?: Label4;
  variant?: ButtonStyle3;
  inverted?: Inverted5;
  size?: ButtonSize3;
  href?: ButtonHref3;
  iconBefore?: IconBeforeButton3;
  iconAfter?: IconAfterButton3;
  fillAnimation?: FillAnimation3;
  iconAnimation?: IconAnimation3;
  type?: TypeAttribute3;
  value?: ValueAttribute3;
  name?: NameAttribute3;
  disabled?: DisabledAttribute3;
  newTab?: OpenLinkInNewTab4;
  className?: AdditionalClasses8;
  component?: KsComponentAttribute21;
  hidden?: HideLink1;
}
/**
 * Icon identifier for icon before the button text
 */
export interface IconBeforeButton3 {
  icon: IconIdentifier6;
  role?: AriaRole6;
  className?: AdditionalClass7;
  component?: KsComponentAttribute19;
}
/**
 * Icon identifier for icon after the button text
 */
export interface IconAfterButton3 {
  icon: IconIdentifier7;
  role?: AriaRole7;
  className?: AdditionalClass8;
  component?: KsComponentAttribute20;
}
/**
 * Headline
 */
export interface Headline1 {
  align?: Alignment2;
  level?: Level1;
  styleAs?: Style1;
  content: Text1;
  subheadline?: Subheadline1;
  spaceAfter?: BottomSpacing1;
  className?: AdditionalClasses9;
  component?: KsComponentAttribute23;
}
