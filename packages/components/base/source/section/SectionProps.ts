/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run `yarn run schema` to regenerate this file.
 */

import type { HeadlineProps } from '@kickstartds/base/lib/headline/typing';
import type { ButtonGroupProps } from '@kickstartds/base/lib/button-group/typing';

/**
 * Width of section to use
 */
export type Width = 'narrow' | 'default' | 'wide' | 'max' | 'full';
/**
 * Background image for the whole section
 */
export type BackgroundImage = string;
/**
 * Width of content to use
 */
export type ContentWidth = 'unset' | 'narrow' | 'default' | 'wide';
/**
 * Choose an alignment for the content
 */
export type ContentAlignment = 'left' | 'center' | 'right';
/**
 * Size of gutter to use
 */
export type Gutter = 'large' | 'default' | 'small' | 'none';
/**
 * Layout mode used for section contents
 */
export type Mode = 'default' | 'tile' | 'list' | 'slider';
/**
 * Set min-width for the tiles in the grid
 */
export type TileWidth = 'smallest' | 'default' | 'medium' | 'large' | 'largest';
/**
 * Additional css classes that should be applied to the content section container
 */
export type AdditionalContentClass = string;
/**
 * Type of background
 */
export type Background = 'default' | 'accent' | 'bold';
/**
 * Whether to invert the section
 */
export type Inverted = boolean;
/**
 * Amount of spacing before the section
 */
export type SpaceBefore = 'default' | 'small' | 'none';
/**
 * Amount of spacing after the section
 */
export type SpaceAfter = 'default' | 'small' | 'none';
/**
 * Width of headline to use
 */
export type HeadlineBoxWidth = 'unset' | 'narrow' | 'default' | 'wide';
/**
 * Choose an alignment for the headline
 */
export type HeadlineBoxAlignment = 'left' | 'center' | 'right';
export type TextAlignment = 'left' | 'center' | 'right';
/**
 * Additional css classes that should be applied to the headline section container
 */
export type AdditionalHeadlineClass = string;
/**
 * Additional css classes that should be applied to the buttons section container
 */
export type AdditionalButtonsClass = string;
export type SliderNavigationPosition =
  | 'below-center'
  | 'below-edge'
  | 'overlay';
/**
 * Icon identifier for the slider back button
 */
export type BackIconForSlider = string;
export type InvisibleBackIconLabel = string;
/**
 * Icon identifier for the slider forward button
 */
export type ForwardIconForSlider = string;
export type InvisibleForwardIconLabel = string;
/**
 * Add additional css classes that should be applied to the section
 */
export type AdditionalClass = string;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute = string;

export interface SectionProps {
  width?: Width;
  backgroundImage?: BackgroundImage;
  content?: {
    width?: ContentWidth;
    align?: ContentAlignment;
    gutter?: Gutter;
    mode?: Mode;
    tileWidth?: TileWidth;
    className?: AdditionalContentClass;
  };
  background?: Background;
  inverted?: Inverted;
  spaceBefore?: SpaceBefore;
  spaceAfter?: SpaceAfter;
  headline?: {
    width?: HeadlineBoxWidth;
    align?: HeadlineBoxAlignment;
    textAlign?: TextAlignment;
    className?: AdditionalHeadlineClass;
  } & HeadlineProps;
  buttons?: {
    arrangement?: string;
    className?: AdditionalButtonsClass;
  } & ButtonGroupProps;
  sliderNavPosition?: SliderNavigationPosition;
  sliderBackIcon?: BackIconForSlider;
  sliderBackLabel?: InvisibleBackIconLabel;
  sliderForwardIcon?: ForwardIconForSlider;
  sliderForwardLabel?: InvisibleForwardIconLabel;
  className?: AdditionalClass;
  component?: KsComponentAttribute;
}
