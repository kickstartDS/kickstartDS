@use 'sass:math';

$grid__columns: 12;

/// container mixins

@mixin grid-gutter($gutter) {
  // margin-/padding-right is set to 0 to avoid horizontal scrollbars
  // @see https://www.rawkblog.com/2019/01/flexbox-gutters-negative-margins-solved/

  margin: math.div($gutter, -2) 0 math.div($gutter, -2) $gutter * -1;

  > * {
    padding: math.div($gutter, 2) 0 math.div($gutter, 2) $gutter;
  }
}

@mixin grid-container($gutter) {
  @include grid-gutter($gutter);

  display: flex;
  flex-wrap: wrap;
  min-width: 100%;
  box-sizing: border-box;

  > * {
    position: relative;
    // Prevent columns from becoming too narrow when at smaller grid tiers by
    // always setting `width: 100%;`. This works because we use `flex` values
    // later on to override this initial width.
    width: 100%;
    background-clip: content-box;
  }
}

@mixin grid-cols-per-row($cols) {
  > * {
    @include grid-cell(math.percentage(math.div(1, $cols)));
  }
}

/// column/cell mixins

@mixin grid-columns($cols) {
  @include grid-cell(math.percentage(math.div($cols, $grid__columns)));
}

@mixin grid-cell($width) {
  flex: 0 0 $width;
  max-width: $width;
}

/// @see http://www.heydonworks.com/article/the-flexbox-holy-albatross
/// @param $threshold
/// @param $max-width width of element when the parent's width is SMALLER than threshold
/// @param $min-width width of element when the parent's width is BIGGER than threshold

@mixin grid-break-at($threshold, $max-width: 100%, $min-width: false) {
  // stylelint-disable declaration-block-no-redundant-longhand-properties
  flex-grow: 1;
  flex-shrink: 1;
  flex-basis: calc((#{$threshold} - 100%) * 999);
  // stylelint-enable

  @if $min-width {
    @if unitless($min-width) {
      $min-width: math.percentage(math.div($min-width, $grid__columns));
    }

    min-width: $min-width;
  }

  @if $max-width {
    @if unitless($max-width) {
      $max-width: math.percentage(math.div($max-width, $grid__columns));
    }

    @if $min-width and
      unit($max-width) ==
      unit($min-width) and
      $max-width <
      $min-width
    {
      @error 'max-width has to be greater than min-width';
    }

    @if $max-width != 100% {
      // max-width: 100% is the default (caused by flex-grow: 1)
      max-width: $max-width;
    }
  }
}
