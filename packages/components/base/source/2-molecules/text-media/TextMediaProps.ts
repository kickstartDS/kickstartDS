/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run `npm run schema2ts` to regenerate this file.
 */

/**
 * RTE text (Markdown)
 */
export type Text = string;
/**
 * relative to text
 */
export type MediaAlignment =
  | 'above-left'
  | 'above-center'
  | 'above-right'
  | 'beside-left'
  | 'beside-right'
  | 'intext-left'
  | 'intext-right'
  | 'below-left'
  | 'below-center'
  | 'below-right';
/**
 * Source
 */
export type Source = string;
/**
 * Embedded video
 */
export type EmbeddedVideo = boolean;
/**
 * video title
 */
export type VideoTitle = string;
/**
 * Width
 */
export type Width = number;
/**
 * height
 */
export type Height = number;
/**
 * Full width media
 */
export type FullWidthMedia = boolean;
/**
 * Image Source
 */
export type ImageSource = string;
/**
 * Image Sourceset
 */
export type ImageSourceset = string;
/**
 * Alt text
 */
export type AltText = string;
/**
 * Width
 */
export type Width1 = number;
/**
 * height
 */
export type Height1 = number;
/**
 * Image Class
 */
export type Class = string;
/**
 * ID
 */
export type ID = string;
/**
 * Itemprop
 */
export type Itemprop = string;
/**
 * Object fit
 */
export type ObjectFit = 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';
/**
 * Render noscript fallback
 */
export type RenderNoscriptFallback = boolean;
/**
 * Load Image Lazily
 */
export type Lazy = boolean;
/**
 * Additional sources. This will result in a `picture`-Element
 */
export type Sources = {
  srcSet?: string;
  media?: string;
  type?: string;
  [k: string]: unknown;
}[];
export type PictureClass = string;
/**
 * Full width media
 */
export type FullWidthMedia1 = boolean;
/**
 * Thumbnail Source
 */
export type ThumbnailSource = string;
/**
 * Lightbox Image Source
 */
export type LightboxImageSource = string;
/**
 * Width
 */
export type Width2 = number;
/**
 * height
 */
export type Height2 = number;
/**
 * Hover Zoom Icon
 */
export type HoverZoomIcon = boolean;
/**
 * Caption
 */
export type Caption = string;
/**
 * Hide caption visually
 */
export type HideCaptionVisually = boolean;
/**
 * Gallery identifier
 */
export type GalleryIdentifier = string;
/**
 * ID
 */
export type ID1 = string;
/**
 * Additional Image Class
 */
export type AdditionalImageClass = string;
/**
 * Full width media
 */
export type FullWidthMedia2 = boolean;
/**
 * Media
 */
export type Media = (
  | {
      video?: Video;
      full?: FullWidthMedia;
      [k: string]: unknown;
    }
  | {
      image?: Picture;
      full?: FullWidthMedia1;
      [k: string]: unknown;
    }
  | {
      lightboxImage?: LazyLightboxImage;
      full?: FullWidthMedia2;
      [k: string]: unknown;
    }
)[];

/**
 * Text-Media
 */
export interface TextMediaProps {
  text?: Text;
  mediaAlignment?: MediaAlignment;
  media?: Media;
  [k: string]: unknown;
}
/**
 * Video
 */
export interface Video {
  src: Source;
  iframe?: EmbeddedVideo;
  title?: VideoTitle;
  width: Width;
  height: Height;
  [k: string]: unknown;
}
/**
 * Picture
 */
export interface Picture {
  src?: ImageSource;
  srcSet?: ImageSourceset;
  alt?: AltText;
  width?: Width1;
  height?: Height1;
  className?: Class;
  id?: ID;
  itemProp?: Itemprop;
  style?: Style;
  objectFit?: ObjectFit;
  noscript?: RenderNoscriptFallback;
  lazy?: Lazy;
  sources?: Sources;
  pictureClassName?: PictureClass;
  [k: string]: unknown;
}
/**
 * Style
 */
export interface Style {
  [k: string]: unknown;
}
/**
 * Lazy Lightbox Image
 */
export interface LazyLightboxImage {
  thumb?: ThumbnailSource;
  image?: LightboxImageSource;
  width?: Width2;
  height?: Height2;
  zoomIcon?: HoverZoomIcon;
  caption?: Caption;
  hideCaption?: HideCaptionVisually;
  gallery?: GalleryIdentifier;
  id?: ID1;
  class?: AdditionalImageClass;
  [k: string]: unknown;
}
